server {    
    listen 443 ssl;
    listen [::]:443 ssl;

    ### the ssl directive is deprecated
    ssl on;
    ### these are to certify the client from website perspective
    ssl_certificate         /app/ssl_certificates/server.crt;
    ssl_certificate_key     /app/ssl_certificates/server.key;
    ### this is to certify the website from client perspective
    ssl_client_certificate  /app/ssl_certificates/verifier.crt;
    ssl_verify_client optional; # `on` if you require client key, `optional` if not

    #ssl_dhparam                     /etc/nginx/certs/dhparams.pem;
    # use the line above if you generated a dhparams file 

    ### with this one I get the certificate as X-SSL-Cert header
    proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;
    proxy_set_header X-SSL-CERT-INFO $ssl_client_s_dn;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;

    root /app/permanentstorage/nginx;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;

    location / {
        try_files $uri @proxy_to_app;
    }
    location ^~ /favicon.ico {
        return 204;
        access_log     off;
        log_not_found  off;
    }
    location @proxy_to_app {
        proxy_pass http://tfserver:5000;
    }
}

server {
    listen 80;
    listen [::]:80;

    server_name 127.0.0.1;
    # server_name <your_public_dns>;

    # 308 -> permanent redirect, with POST
    # 307 -> temporary redirect, with POST
    # 301 -> permanent redirect, only GET
    # 302 -> temporary redirect, only GET
	return 307 https://$server_name$request_uri;

    # location / {
    #     # return 200 'gangnam style!';
    # }
}